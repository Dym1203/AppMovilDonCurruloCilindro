// Generated by view binder compiler. Do not edit!
package com.example.appmovildoncurrulocilindro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.appmovildoncurrulocilindro.R;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemMisComprasBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnExportInvoice;

  @NonNull
  public final MaterialCardView cvMisCompras;

  @NonNull
  public final TextView txtNameAmount;

  @NonNull
  public final TextView txtNameCodCompras;

  @NonNull
  public final TextView txtNameDatePurchases;

  @NonNull
  public final TextView txtNameOrder;

  @NonNull
  public final TextView txtValueAmount;

  @NonNull
  public final TextView txtValueCodPurchases;

  @NonNull
  public final TextView txtValueDatePurchases;

  @NonNull
  public final TextView txtValueOrder;

  private ItemMisComprasBinding(@NonNull LinearLayout rootView, @NonNull Button btnExportInvoice,
      @NonNull MaterialCardView cvMisCompras, @NonNull TextView txtNameAmount,
      @NonNull TextView txtNameCodCompras, @NonNull TextView txtNameDatePurchases,
      @NonNull TextView txtNameOrder, @NonNull TextView txtValueAmount,
      @NonNull TextView txtValueCodPurchases, @NonNull TextView txtValueDatePurchases,
      @NonNull TextView txtValueOrder) {
    this.rootView = rootView;
    this.btnExportInvoice = btnExportInvoice;
    this.cvMisCompras = cvMisCompras;
    this.txtNameAmount = txtNameAmount;
    this.txtNameCodCompras = txtNameCodCompras;
    this.txtNameDatePurchases = txtNameDatePurchases;
    this.txtNameOrder = txtNameOrder;
    this.txtValueAmount = txtValueAmount;
    this.txtValueCodPurchases = txtValueCodPurchases;
    this.txtValueDatePurchases = txtValueDatePurchases;
    this.txtValueOrder = txtValueOrder;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemMisComprasBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemMisComprasBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_mis_compras, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemMisComprasBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnExportInvoice;
      Button btnExportInvoice = ViewBindings.findChildViewById(rootView, id);
      if (btnExportInvoice == null) {
        break missingId;
      }

      id = R.id.cvMisCompras;
      MaterialCardView cvMisCompras = ViewBindings.findChildViewById(rootView, id);
      if (cvMisCompras == null) {
        break missingId;
      }

      id = R.id.txtNameAmount;
      TextView txtNameAmount = ViewBindings.findChildViewById(rootView, id);
      if (txtNameAmount == null) {
        break missingId;
      }

      id = R.id.txtNameCodCompras;
      TextView txtNameCodCompras = ViewBindings.findChildViewById(rootView, id);
      if (txtNameCodCompras == null) {
        break missingId;
      }

      id = R.id.txtNameDatePurchases;
      TextView txtNameDatePurchases = ViewBindings.findChildViewById(rootView, id);
      if (txtNameDatePurchases == null) {
        break missingId;
      }

      id = R.id.txtNameOrder;
      TextView txtNameOrder = ViewBindings.findChildViewById(rootView, id);
      if (txtNameOrder == null) {
        break missingId;
      }

      id = R.id.txtValueAmount;
      TextView txtValueAmount = ViewBindings.findChildViewById(rootView, id);
      if (txtValueAmount == null) {
        break missingId;
      }

      id = R.id.txtValueCodPurchases;
      TextView txtValueCodPurchases = ViewBindings.findChildViewById(rootView, id);
      if (txtValueCodPurchases == null) {
        break missingId;
      }

      id = R.id.txtValueDatePurchases;
      TextView txtValueDatePurchases = ViewBindings.findChildViewById(rootView, id);
      if (txtValueDatePurchases == null) {
        break missingId;
      }

      id = R.id.txtValueOrder;
      TextView txtValueOrder = ViewBindings.findChildViewById(rootView, id);
      if (txtValueOrder == null) {
        break missingId;
      }

      return new ItemMisComprasBinding((LinearLayout) rootView, btnExportInvoice, cvMisCompras,
          txtNameAmount, txtNameCodCompras, txtNameDatePurchases, txtNameOrder, txtValueAmount,
          txtValueCodPurchases, txtValueDatePurchases, txtValueOrder);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
